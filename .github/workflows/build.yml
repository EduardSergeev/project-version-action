name: build

on:
  push:

jobs:
  node-test:
    runs-on: ubuntu-latest
    env:
      TZ: Australia/Sydney
    steps:
    - uses: actions/checkout@v3
    - name: Set project version for Node project
      uses: './'
      with:
        version-file: test/node/example/package.json    
    - name: Test if version '${{ env.VERSION }}' is correctly set for Node project
      run: cd test/node/example && npm install && npm test

  dotnet-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set project version for .NET project
      uses: './'
      with:
        time-zone: Australia/Sydney
        version-file: test/dotnet/example/example.csproj
    - name: Test if version '${{ env.VERSION }}' is correctly set for .NET project
      run: cd test/dotnet/example && dotnet test

  dotnet-cs-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set project version for .NET project via AssemblyInfo.cs
      uses: './'
      with:
        time-zone: Australia/Sydney
        version-file: test/dotnet/attribute/properties/AssemblyInfo.cs
    - name: Test if version '${{ env.VERSION }}' is correctly set for .NET project via AssemblyInfo.cs
      run: cd test/dotnet/attribute && dotnet test

  cabal-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        date: ['current', '2021-06-07']
    steps:
    - uses: actions/checkout@v3
    - name: Set current date to ${{ matrix.date }}
      if: ${{ matrix.date != 'current' }}
      run: sudo date -s ${{ matrix.date }}
    - name: Set project version for Cabal project
      uses: './'
      with:
        version-file: test/cabal/example/example.cabal
    - name: Test if version '${{ env.VERSION }}' is correctly set for Cabal project
      run: cd test/cabal/example && cabal update && cabal test

  time-zone-test:
    strategy:
      fail-fast: false
      matrix:
        env:
          - {  }
          - { TZ: Australia/Sydney }
        time-zone:
          - 
          - America/New_York
    runs-on: ubuntu-latest
    env: ${{ matrix.env }}
    steps:
    - uses: actions/checkout@v3
    - name: Set project version for Node project
      uses: './'
      with:
        version-file: test/node/example/package.json
        time-zone: ${{ matrix.time-zone }}
    - name: Test if version '${{ env.VERSION }}' is correctly set for Node project
      run: cd test/node/example && npm install && npm test

  only-version-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set env.VERSION
      id: set-version
      uses: './'
      with:
        version-file-exists: false
    - name: Check if env.VERSION is correctly set
      run: |
        if [[ -z "${{ env.VERSION }}" ]]; then
          exit 1
        elif [[ -z "${{ steps.set-version.outputs.project-version }}" ]]; then
          exit 2
        elif [[ "${{ env.VERSION }}" != "${{ steps.set-version.outputs.project-version }}" ]]; then
          exit 3
        fi

  publish-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
      - node-test
      - dotnet-test
      - dotnet-cs-test
      - cabal-test
      - time-zone-test
      - only-version-test
    runs-on: ubuntu-latest
    env:
      RELEASE_BODY_FILE: ${{ github.workspace }}/release-description.md
    steps:
      - uses: actions/checkout@v3
      - name: Create release notes
        run: |
          echo "RELEASE=$(git show -q --format=format:%s)" >> $GITHUB_ENV
          git show -q --format=format:%b > ${{ env.RELEASE_BODY_FILE }}
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          commit: ${{ github.sha }}
          name: ${{ env.RELEASE }}
          bodyFile: ${{ env.RELEASE_BODY_FILE }}
          makeLatest: ${{ startsWith(github.event.base_ref, 'refs/heads/main') }}
          prerelease: ${{ !startsWith(github.event.base_ref, 'refs/heads/main') }}
  